system: You are a tech lead who's good at building software, your goal is the help user to implement all the designed data types and interfaces in details so it can go to production.

You will output the content of each file in the file structure including ALL code.
Each file must strictly follow a markdown code blsock format, where the following tokens must be replaced such that
FILENAME is the lowercase file name including the file extension,
LANG is the markup code block language for the code's language, and CODE is the code:

FILENAME
```LANG
CODE
```

Please note that the code should be fully functional. No placeholders.

You will start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc. The code should be fully functional. Make sure that code in different files are compatible with each other.
Before you finish, double check that all files in the file structure is implemented.

This is an example
User:
File Structure:
```
{{
  "twitter_search_engine": {{
    "app.py": {{}},
    "components": {{
      "__init__.py": {{}},
      "search_algorithm.py": {{}},
      "tweet_indexer.py": {{}},
    }}
    "models": {{
      "__init__.py": {{}},
      "search_query.py": {{}},
      "tweet.py": {{}},
      "search_result.py": {{}},
      "user.py": {{}},
      "filter_options.py": {{}},
      "user_preferences.py": {{}},
      "analytics_data.py": {{}}
    }},
    "utils": {{
      "__init__.py": {{}},
      "common_functions.py": {{}},
      "constants.py": {{}}
    }},
    "tests": {{
      "__init__.py": {{}},
      "test_search_algorithm.py": {{}},
      "test_tweet_indexer.py": {{}},
      "test_tweet_ranker.py": {{}},
      "test_user_interface.py": {{}},
      "test_tweet_update_monitor.py": {{}},
      "test_advanced_searcher.py": {{}},
      "test_user_preference_manager.py": {{}},
      "test_analytics_monitor.py": {{}}
    }},
    "static": {{}},
    "templates": {{}},
    "README.md": {{}},
    ".gitignore": {{}}
  }}
}}
```
Designed Data Types:
```
SearchResult:
    tweets: list of Tweet
    query: SearchQuery
    total_matches: int
    search_time: float

SearchQuery:
    raw_query: string
    tokenized_query: list of string
    query_time: int
    boolean_operators: list of string

Tweet:
    id: string
    content: string
    user_id: string
    timestamp: int
    location: string
    retweets_count: int
    likes_count: int
    replies_count: int
```
Designed Interfaces:
```
SearchAlgorithm:
  process_search_query(query: SearchQuery) -> SearchQuery
  tokenize_search_query(query: SearchQuery) -> list[string]
  normalize_search_query(query: SearchQuery) -> SearchQuery
  execute_search(query: SearchQuery) -> SearchResult
  update_search_index(tweet_updates: list[Tweet]) -> string
```

Can you implement it in Python?
You:
# twitter_search_engine/models/search_query.py
```python
from dataclasses import dataclass
from typing import List

@dataclass
class SearchQuery:
    raw_query: str
    tokenized_query: List[str]
    query_time: int
    boolean_operators: List[str]
```

# twitter_search_engine/models/tweet.py
```python
from dataclasses import dataclass

@dataclass
class Tweet:
    id: str
    content: str
    user_id: str
    timestamp: int
    location: str
    retweets_count: int
    likes_count: int
    replies_count: int
```

# twitter_search_engine/models/search_result.py
```python
from dataclasses import dataclass
from typing import List
from .tweet import Tweet
from .search_query import SearchQuery

@dataclass
class SearchResult:
    tweets: List[Tweet]
    query: SearchQuery
    total_matches: int
    search_time: float
```

# twitter_search_engine/app.py
```python
from fastapi import FastAPI
from components.search_algorithm import SearchAlgorithm

app = FastAPI()
search_algorithm = SearchAlgorithm()

@app.post("/search")
async def search(req: SearchReq) -> SearchResponse:
    query = req.query
    
    processed_query = search_algorithm.process_search_query(query)
    tokenized_query = search_algorithm.tokenize_search_query(processed_query)
    normalized_query = search_algorithm.normalize_search_query(tokenized_query)
    search_result = search_algorithm.execute_search(normalized_query)
    return search_result
```

```
# twitter_search_engine/components/search_algorithm.py
from typing import List
from models.search_query import SearchQuery
from models.search_result import SearchResult
from models.tweet import Tweet

class SearchAlgorithm:
    def process_search_query(self, query: SearchQuery) -> SearchQuery:
        # Process the search query and return the processed query
        processed_query = None
        # Implement query processing logic and return processed query
        return processed_query

    def tokenize_search_query(self, query: SearchQuery) -> List[str]:
        # Tokenize the search query and return the list of tokens
        tokens = []
        # Implement tokenization logic and return tokens
        return tokens

    def normalize_search_query(self, query: SearchQuery) -> SearchQuery:
        # Normalize the search query and return the normalized query
        normalized_query = None
        # Implement normalization logic and return normalized query
        return normalized_query

    def execute_search(self, query: SearchQuery) -> SearchResult:
        # Execute the search query and return the search results
        search_result = None
        # Implement search execution logic and return search result
        return search_result
```
```

Now
User:
File Structure:
```
{
  "ecommerce_platform": {
    "app.py": {},
    "components": {
      "__init__.py": {},
      "user_authentication.py": {},
      "user_interface.py": {},
      "product_catalog.py": {},
      "search_filter.py": {},
      "shopping_cart.py": {},
      "payment_gateway.py": {},
      "order_management.py": {},
      "email_service.py": {},
      "reviews_ratings.py": {},
      "wishlist.py": {},
      "customer_support.py": {},
      "shipping_delivery.py": {},
      "shipping_carriers.py": {},
      "order_tracking.py": {},
      "payment_provider.py": {}
    },
    "models": {
      "__init__.py": {},
      "product.py": {},
      "rating.py": {},
      "user.py": {},
      "cart_item.py": {},
      "order.py": {},
      "payment.py": {},
      "shipping.py": {},
      "customer_support_ticket.py": {},
      "wishlist_item.py": {},
      "search_filter.py": {}
    },
    "utils": {
      "__init__.py": {},
      "common_functions.py": {},
      "constants.py": {}
    },
    "tests": {
      "__init__.py": {},
      "test_user_authentication.py": {},
      "test_user_interface.py": {},
      "test_product_catalog.py": {},
      "test_search_filter.py": {},
      "test_shopping_cart.py": {},
      "test_payment_gateway.py": {},
      "test_order_management.py": {},
      "test_email_service.py": {},
      "test_reviews_ratings.py": {},
      "test_wishlist.py": {},
      "test_customer_support.py": {},
      "test_shipping_delivery.py": {},
      "test_shipping_carriers.py": {},
      "test_order_tracking.py": {},
      "test_payment_provider.py": {}
    },
    "config": {
      "__init__.py": {},
      "settings.py": {},
      "logging.py": {}
    },
    "static": {},
    "templates": {},
    "README.md": {},
    ".gitignore": {}
  }
}
```
Designed Data Types:
```
Product:
    id: string
    name: string
    description: string
    price: float
    image_url: string
    stock: int
    category: string
    ratings: list of Rating

Rating:
    user_id: string
    product_id: string
    rating: int
    review: string

User:
    id: string
    username: string
    password_hash: string
    email: string
    shipping_address: string
    payment_method: string

CartItem:
    user_id: string
    product_id: string
    quantity: int

Order:
    id: string
    user_id: string
    order_items: list of CartItem
    total_cost: float
    payment_method: string
    order_status: string
    shipping_address: string
    timestamp: int

Payment:
    user_id: string
    order_id: string
    amount: float
    payment_method: string
    payment_status: string

Shipping:
    order_id: string
    user_id: string
    carrier: string
    tracking_number: string
    shipping_cost: float
    estimated_delivery_date: int

CustomerSupportTicket:
    id: string
    user_id: string
    issue: string
    status: string
    timestamp: int

WishlistItem:
    user_id: string
    product_id: string

SearchFilter:
    keyword: string
    category: string
    price_range: tuple of float
    rating: int
```
Designed Interfaces:
```
UserAuthentication:
  register_user(user_details: User) -> string
  login_user(login_details: dict) -> string
  authenticate_user(user_id: string) -> string
  update_user_info(user_id: string, updated_info: User) -> string

UserInterface:
  display_products(product_list: list[Product]) -> None
  display_search_results(search_results: list[Product]) -> None
  show_product_details(product_id: string) -> None
  show_cart_details(cart_items: list[CartItem]) -> None
  show_order_confirmation(order_confirmation: Order) -> None
  show_payment_form() -> None
  show_error_message(error_message: string) -> None
  display_feedback(feedback: list[Rating]) -> None
  show_wishlist(wishlist: list[WishlistItem]) -> None
  show_user_info(user_id: string) -> None
  display_shipping_costs(shipping_costs: float) -> None
  display_order_status(order_status: string) -> None
  display_order_history(order_history: list[Order]) -> None

ProductCatalog:
  get_product_list() -> list[Product]
  get_product_details(product_id: string) -> Product

SearchFilter:
  get_relevant_products(query: string) -> list[Product]
  apply_filters(filter_options: SearchFilter) -> list[Product]

ShoppingCart:
  add_product_to_cart(product_id: string, quantity: int) -> string
  remove_product_from_cart(product_id: string) -> string
  modify_quantity(product_id: string, new_quantity: int) -> string
  get_cart_contents() -> list[CartItem]

PaymentGateway:
  process_payment(payment_data: Payment) -> string
  send_payment_to_provider(payment_data: Payment) -> string

OrderManagement:
  notify_transaction_status(transaction_status: string) -> string
  create_order_record(transaction_data: Payment) -> Order
  get_order_details(order_id: string) -> Order

EmailService:
  send_email(email_data: dict) -> string

ReviewsRatings:
  store_feedback(product_id: string, feedback_data: Rating) -> string
  get_product_feedback(product_id: string) -> list[Rating]

Wishlist:
  add_product_to_wishlist(product_id: string) -> string
  remove_product_from_wishlist(product_id: string) -> string
  get_wishlist_contents() -> list[WishlistItem]

CustomerSupport:
  receive_inquiry(inquiry_data: CustomerSupportTicket) -> None
  provide_assistance(inquiry_id: string, response_data: string) -> string

ShippingDelivery:
  calculate_shipping_cost(address_data: string, package_data: dict) -> float
  update_shipping_address(user_id: string, new_address_data: string) -> string
  interact_with_shipping_carriers(shipping_request: Shipping) -> string

ShippingCarriers:
  handle_shipment(shipment_data: Shipping) -> string
  get_delivery_status(shipment_id: string) -> string

OrderTracking:
  retrieve_order_status(order_id: string) -> string
  update_order_status(order_id: string, new_status: string) -> string

PaymentProvider:
  authorize_payment(payment_data: Payment) -> string
```
Can you implement it in Python?
You:
